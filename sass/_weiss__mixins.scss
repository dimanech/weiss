// ============================================================================
//  WAI and W3C support
//=============================================================================

// Hide only visually, but have it available for screenreaders
@mixin i-hide_vis {
	border: none;
	clip: rect(1px, 1px, 1px, 1px);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute !important;
	width: 1px;

	.ie6-7 & {
		clip: rect(1px 1px 1px 1px);
	}
}

// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard
@mixin i-hide_vis_focus {
	&:focus,
	&:active {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
	}
}

// ============================================================================
//  Layout support
//=============================================================================

// Clearfix
@mixin i-clfx {
	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear: both;
	}

	.ie6-7 & {
		zoom: 1;
	}
}

// Simple static grid

// The $gw-column and $gw-gutter variables must be defined in your base stylesheet to properly use the grid-width function.
//
// $gw-column: 100px; // Column Width
// $gw-gutter: 40px; // Gutter Width
//
// div {
// width: grid-width(4); // returns 520px;
// margin-left: $gw-gutter; // returns 40px;
// }

@function grid-width($n) {
	@return $n * $gw-column + ($n - 1) * $gw-gutter;
}

// ============================================================================
//    Vendor prefix Mixins (http://bourbon.io)
//=============================================================================

$prefixes-default:     moz webkit spec !default;

$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin disable-prefix-for-all() {
	$prefix-for-webkit:    false;
	$prefix-for-mozilla:   false;
	$prefix-for-microsoft: false;
	$prefix-for-opera:     false;
	$prefix-for-spec:      false;
}

// Vendor mixin
//
// example : @include vendor(transform, translateX(40px))
// or
// @include vendor(transform, translateX(40px), moz webkit ms o spec)

@mixin vendor($property, $value, $prefixes: $prefixes-default) {
	@each $prefix in $prefixes {

		@if $prefix == webkit {
			@if $prefix-for-webkit {
				-webkit-#{$property}: $value;
			}
		}

		@else if $prefix == moz {
			@if $prefix-for-mozilla {
				-moz-#{$property}: $value;
			}
		}

		@else if $prefix == ms {
			@if $prefix-for-microsoft {
				-ms-#{$property}: $value;
			}
		}

		@else if $prefix == o {
			@if $prefix-for-opera {
				-o-#{$property}: $value;
			}
		}

		@else if $prefix == spec {
			@if $prefix-for-spec {
				#{$property}: $value;
			}
		}

		@else  {
			@warn "Unrecognized prefix: #{$prefix}";
		}
	}
}

// Transition shortcut
//
// example :
// @include transition(all ease-in 600ms)
// or
// @include transition()

$transition-default: all linear .2s !default;

@mixin transition($properties: $transition-default) {
	@include vendor(transition, $properties);
}

// Animation shortcut
//
// example :
// .element {
//   @include vendor(animation, fadeInSlide linear .2s);
// }
//
// @include keyframes(fadeInSlide) {
// 	from {
//		@include vendor(transform, scale(1) translateX(20px));
//		opacity: 0;
//	}
//	to {
//		@include vendor(transform, scale(0) translateX(0px));
//		opacity: 1;
//	}
// }

@mixin keyframes($name) {
	$original-prefix-for-webkit:    $prefix-for-webkit;
	$original-prefix-for-mozilla:   $prefix-for-mozilla;
	$original-prefix-for-spec:      $prefix-for-spec;

	@if $original-prefix-for-webkit {
		@include disable-prefix-for-all();
		$prefix-for-webkit: true;
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $original-prefix-for-mozilla {
		@include disable-prefix-for-all();
		$prefix-for-mozilla: true;
		@-moz-keyframes #{$name} {
			@content;
		}
	}

	@if $original-prefix-for-spec {
		@include disable-prefix-for-all();
		$prefix-for-spec: true;
		@keyframes #{$name} {
			@content;
		}
	}

	$prefix-for-webkit:    $original-prefix-for-webkit;
	$prefix-for-mozilla:   $original-prefix-for-mozilla;
	$prefix-for-spec:      $original-prefix-for-spec;
}

//============================================================================
//   HIDPI display alternatives
//============================================================================

//http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3), // Google Nexus 7
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
	// on retina, use image that's scaled by 2
		background-image: url($image);
		background-size: $width $height;
	}
}

//div.logo {
//	background: url("logo.png") no-repeat;
//	@include image-2x("logo2x.png", 100px, 25px);
//}

// Inspired by Tim Kadlec | Media Query & Asset Downloading Results
// http://timkadlec.com/2012/04/media-query-asset-downloading-results/

// Inspired by kaelig / hidpi
// https://github.com/kaelig/hidpi
// hidpi() is a Sass mixin that serves high resolution graphics to high density (Retina-like) displays

$extension: png !default;

@mixin hidpi($image: false, $extension: $extension) {
	@if $image {
		background: url('#{$imgDir}#{$image}.#{$extension}') no-repeat;
	}
	@media #{$hidpi} {
		@if $image {
			$image-hidpi-fullname: '#{$imgDir}#{$image}_x2.#{$extension}';
			background: url($image-hidpi-fullname) no-repeat;
			@content;
		}
		@else {
			@content;
		}
	}
}

@mixin hidpi-image ($image: false, $width: false, $height: false, $extension: $extension) {
	width: em($width);
	height: em($height);
	@include hidpi ($image, $extension) {
		background-size: em($width) em($height);
	}
}
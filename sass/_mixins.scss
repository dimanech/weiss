$cols: 12;
$gutter: 2%;


$one_col: (100% - ($gutter * ($cols - 1))) / $cols;

@mixin cols($num) {
  width: ($one_col * $num) + ($gutter * ($num - 1));
}

@mixin sub_cols($num_child, $num_parent) {
  $parent_size: ($one_col * $num_parent) + ($gutter * ($num_parent - 1));
  $child_size: ($one_col * $num_child) + ($gutter * ($num_child - 1));
  margin-left: ($gutter / $parent_size) * 100%;
  width: ($child_size / $parent_size) * 100%;
}

// @group grid
// .row {
//   #{enumerate('.span', 1, $cols, '')} {
//     float: left;
//     margin-left: $gutter;
//   }

//   @for $i from 1 through $cols {
//     .span#{$i} {
//       @include cols($i);

//       @for $j from 1 through ($i - 1) {
//         .span#{$j} {
//           @include sub_cols($j, $i);
//         }
//       }
//     }
//   }
// }

//
// Blankwork semantic grid
// http://www.blankwork.net/


// Main Variables:
// I'm placing an underscore before each variable
// because I'm using rather generic names
// I'm using the underscore
// to avoid any accidents:
$_columns: 12 !default;      // Total number of columns
$_column-width: 60px !default;   // Width of a single column
$_gutter: 20px !default;     // Width of the gutter

// Calculate the total width:
$_width: $_columns * ($_column-width + $_gutter);


// A Function to calculate width:
// Example usage: (based on default values)
// get_width(3, false) would return 240px
// get_width(3) or get_width(3, true) would return 220px;
// and plain get_width() or get_width would return 940px;

@function get_width($columns:$_columns, $onlyInnerWidth: true, $_subtract:0) {
  // First set a default return value 
  $return: ($_column-width + $_gutter) * $columns - $_subtract !default;

  // If we want to get only the inner width (without gutter)
  @if $onlyInnerWidth == true
  {
    // Return the total calculated width, without the margins
    // If the second parameter of this function is not specified
    // This is what is going to be returned
    $return: ($_column-width + $_gutter) * $columns - $_gutter - $_subtract;
  }

  @return $return;
}

// Column Mixin:
// We're defining the default values as follows:
// Default Column Count: Max Column Count
// Padding (explained below): 0
// Margin is the gutter width, but can be overridden 
@mixin column($columns: $_columns, $_subtract:0, $_offset: null, $gutter:$_gutter) {
  // Default Properties for a column:
  display:inline;
  float:left;
   $getWidth: get_width($columns, true, $_subtract); // Use the width calculation function to get the width 

    @if $gutter != 0 {
        // Check for Alpha (a, first, f);
        @if $_offset == alpha {
          margin-left: -($gutter / 2);
          margin-right: $gutter/2;
        }

        // Check for Omega (o, l, last);
        @else if $_offset == omega {
          margin-right: -($gutter / 2);
          margin-left: $gutter/2;
        }

        // No Margins
        @else if $_offset == full {
          $getWidth: $getWidth + $gutter;
        }

        @else if $_offset == none {
          $getWidth: $getWidth + $gutter;
        }

        @else {
          margin-left: ($gutter / 2); 
          margin-right: ($gutter / 2);
        }
    }

    width: $getWidth;
}

// Finally, we need a wrapper for our columns. 
// This typically is a main content wrapper, 
// But just in case someone finds an alternative use of this, 
// we shouldhave the flexibility
// So wrapper( column count, center ?, subtract)
@mixin wrapper($columns: $_columns, $center:true, $_subtract:0) {
  // Because this is a wrapper, we don't need the outer gutter - we need the full width
  $getWrapperWidth: get_width($columns, false);
  // In case there is a need to subtract the wrapper
  $wrapperWidth: $getWrapperWidth - $_subtract;
  width:$wrapperWidth;

  // If we want the wrapper to be centered (by default we do)
  @if $center == true {
    margin-left:auto;
    margin-right:auto;
  }

// And clear the mess afterwards:
@extend .clearfix;

}

// To be able to use columns inside another element,
// You need to set that element to be a container (of how many columns)
// So: @include container(x_number_of_columns)
@mixin container($columns:$_columns, $_subtract:0) {
  //display:inline;
  //float:left;
    $getWidth: get_width($columns, false); // Use the width calculation function to get 
    $columnWidth: $getWidth - $_subtract;
    width: $columnWidth;
}
// Container Alias
@mixin fullwidth($columns:$_columns, $_subtract:0) { 
  @include container($columns, $_subtract) 
}


@mixin alpha {
  margin-left:0;
}

@mixin omega {
  margin-right:0;
}

// ============================================================================
//    Mixins
//=============================================================================

@mixin bdradius($radius: 5px) {
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
  -webkit-background-clip: padding-box;
}

@mixin bsh($bshval: 0 0 4px rgba(0,0,0,0.5)) {
  -moz-box-shadow: $bshval;
  -webkit-box-shadow: $bshval;
  -o-box-shadow: $bshval;
  -box-shadow: $bshval;
}

@mixin transition($transition: all linear 200ms) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

//.test-class {
//  @include transition(all ease 300ms);
//}
